Help on class Mtz in module gemmi:

class Mtz(pybind11_builtins.pybind11_object)
 |  Method resolution order:
 |      Mtz
 |      pybind11_builtins.pybind11_object
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(...)
 |      __init__(self: gemmi.Mtz, with_base: bool = False) -> None
 |  
 |  __repr__(...)
 |      __repr__(self: gemmi.Mtz) -> str
 |  
 |  add_column(...)
 |      add_column(self: gemmi.Mtz, label: str, type: str, dataset_id: int = -1, pos: int = -1, expand_data: bool = True) -> gemmi.Mtz.Column
 |  
 |  add_dataset(...)
 |      add_dataset(self: gemmi.Mtz, name: str) -> gemmi.Mtz.Dataset
 |  
 |  column_labels(...)
 |      column_labels(self: gemmi.Mtz) -> List[str]
 |  
 |  column_with_label(...)
 |      column_with_label(self: gemmi.Mtz, label: str, dataset: gemmi.Mtz.Dataset = None) -> gemmi.Mtz.Column
 |  
 |  columns_with_type(...)
 |      columns_with_type(self: gemmi.Mtz, type: str) -> List[gemmi.Mtz.Column]
 |  
 |  copy_column(...)
 |      copy_column(self: gemmi.Mtz, dest_idx: int, src_col: gemmi.Mtz.Column, trailing_cols: List[str] = []) -> gemmi.Mtz.Column
 |  
 |  count(...)
 |      count(self: gemmi.Mtz, label: str) -> int
 |  
 |  data_fits_into(...)
 |      data_fits_into(self: gemmi.Mtz, size: List[int[3]]) -> bool
 |  
 |  dataset(...)
 |      dataset(self: gemmi.Mtz, id: int) -> gemmi.Mtz.Dataset
 |  
 |  ensure_asu(...)
 |      ensure_asu(self: gemmi.Mtz, tnt_asu: bool = False) -> None
 |  
 |  expand_to_p1(...)
 |      expand_to_p1(self: gemmi.Mtz) -> None
 |  
 |  get_cell(...)
 |      get_cell(self: gemmi.Mtz, dataset: int = -1) -> gemmi.UnitCell
 |  
 |  get_f_phi(...)
 |      get_f_phi(self: gemmi.Mtz, f: str, phi: str, as_is: bool = False) -> gemmi.ComplexAsuData
 |  
 |  get_f_phi_on_grid(...)
 |      get_f_phi_on_grid(self: gemmi.Mtz, f: str, phi: str, size: List[int[3]], half_l: bool = False, order: gemmi.AxisOrder = <AxisOrder.XYZ: 1>) -> gemmi.ReciprocalComplexGrid
 |  
 |  get_float(...)
 |      get_float(self: gemmi.Mtz, col: str, as_is: bool = False) -> gemmi.FloatAsuData
 |  
 |  get_int(...)
 |      get_int(self: gemmi.Mtz, col: str, as_is: bool = False) -> gemmi.IntAsuData
 |  
 |  get_size_for_hkl(...)
 |      get_size_for_hkl(self: gemmi.Mtz, min_size: List[int[3]] = [0, 0, 0], sample_rate: float = 0.0) -> List[int[3]]
 |  
 |  get_value_on_grid(...)
 |      get_value_on_grid(self: gemmi.Mtz, label: str, size: List[int[3]], half_l: bool = False, order: gemmi.AxisOrder = <AxisOrder.XYZ: 1>) -> gemmi.ReciprocalFloatGrid
 |  
 |  get_value_sigma(...)
 |      get_value_sigma(self: gemmi.Mtz, f: str, sigma: str, as_is: bool = False) -> gemmi.ValueSigmaAsuData
 |  
 |  make_1_d2_array(...)
 |      make_1_d2_array(self: gemmi.Mtz, dataset: int = -1) -> numpy.ndarray[numpy.float32]
 |  
 |  make_d_array(...)
 |      make_d_array(self: gemmi.Mtz, dataset: int = -1) -> numpy.ndarray[numpy.float32]
 |  
 |  make_miller_array(...)
 |      make_miller_array(self: gemmi.Mtz) -> numpy.ndarray[numpy.int32]
 |  
 |  reindex(...)
 |      reindex(self: gemmi.Mtz, op: gemmi.Op) -> str
 |  
 |  remove_column(...)
 |      remove_column(self: gemmi.Mtz, index: int) -> None
 |  
 |  replace_column(...)
 |      replace_column(self: gemmi.Mtz, dest_idx: int, src_col: gemmi.Mtz.Column, trailing_cols: List[str] = []) -> gemmi.Mtz.Column
 |  
 |  resolution_high(...)
 |      resolution_high(self: gemmi.Mtz) -> float
 |  
 |  resolution_low(...)
 |      resolution_low(self: gemmi.Mtz) -> float
 |  
 |  rfree_column(...)
 |      rfree_column(self: gemmi.Mtz) -> gemmi.Mtz.Column
 |  
 |  row_as_dict(...)
 |      row_as_dict(self: gemmi.Mtz, hkl: List[int[3]]) -> dict
 |  
 |  set_cell_for_all(...)
 |      set_cell_for_all(self: gemmi.Mtz, arg0: gemmi.UnitCell) -> None
 |  
 |  set_data(...)
 |      set_data(*args, **kwargs)
 |      Overloaded function.
 |      
 |      1. set_data(self: gemmi.Mtz, asu_data: gemmi.ComplexAsuData) -> None
 |      
 |      2. set_data(self: gemmi.Mtz, asu_data: gemmi.FloatAsuData) -> None
 |      
 |      3. set_data(self: gemmi.Mtz, array: numpy.ndarray[numpy.float32]) -> None
 |  
 |  sort(...)
 |      sort(self: gemmi.Mtz, use_first: int = 3) -> bool
 |  
 |  switch_to_asu_hkl(...)
 |      switch_to_asu_hkl(self: gemmi.Mtz) -> bool
 |  
 |  switch_to_original_hkl(...)
 |      switch_to_original_hkl(self: gemmi.Mtz) -> bool
 |  
 |  transform_f_phi_to_map(...)
 |      transform_f_phi_to_map(self: gemmi.Mtz, f: str, phi: str, min_size: List[int[3]] = [0, 0, 0], exact_size: List[int[3]] = [0, 0, 0], sample_rate: float = 0.0, order: gemmi.AxisOrder = <AxisOrder.XYZ: 1>) -> gemmi.FloatGrid
 |  
 |  update_reso(...)
 |      update_reso(self: gemmi.Mtz) -> None
 |  
 |  write_to_file(...)
 |      write_to_file(self: gemmi.Mtz, path: str) -> None
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  appended_text
 |  
 |  array
 |  
 |  batches
 |  
 |  cell
 |  
 |  columns
 |  
 |  datasets
 |  
 |  history
 |  
 |  max_1_d2
 |  
 |  min_1_d2
 |  
 |  nreflections
 |  
 |  nsymop
 |  
 |  sort_order
 |  
 |  spacegroup
 |  
 |  spacegroup_name
 |  
 |  spacegroup_number
 |  
 |  title
 |  
 |  valm
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  Batch = <class 'gemmi.Mtz.Batch'>
 |  
 |  
 |  Column = <class 'gemmi.Mtz.Column'>
 |  
 |  
 |  Dataset = <class 'gemmi.Mtz.Dataset'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pybind11_builtins.pybind11_object:
 |  
 |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
 |      Create and return a new object.  See help(type) for accurate signature.

