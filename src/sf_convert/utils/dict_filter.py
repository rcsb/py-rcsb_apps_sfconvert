# Class to convert dictionary to a data file and provide lists of categories
# and attributes that can be used in files.

import os
import json
import sys

from mmcif.api.DictionaryApi import DictionaryApi
from mmcif.io.IoAdapterPy import IoAdapterPy as IoAdapter


class DictFilter:
    def __init__(self):
        self.__dataPath = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data", "dictdata.json"))

        # pdbx_powder_data not in dictionary -- will accept anyways
        self.__categories = ['audit', 'audit_conform', 'cell',
                             'diffrn', 'diffrn_measurement',
                             'diffrn_orient_matrix',
                             'diffrn_radiation', 'diffrn_radiation_wavelength',
                             'diffrn_refln', 'diffrn_reflns',
                             'diffrn_scale_group', 'diffrn_standard_refln',
                             'entry', 'exptl_crystal', 'pdbx_audit_conform',
                             'pdbx_exptl_crystal_cryo_treatment',
                             'pdbx_powder_data', 'pdbx_refln_signal_binning',
                             'refine', 'refln', 'reflns', 'reflns_scale',
                             'reflns_shell', 'software', 'symmetry',
                             'symmetry_equiv']

        self.__datadict = None

    def createDataDictionary(self, dictPath):
        """Loads dictionary, extracts categories and stores json file"""

        myIo = IoAdapter(raiseExceptions=True)
        cList = myIo.readFile(inputFilePath=dictPath)

        dApi = DictionaryApi(containerList=cList, consolidate=True, verbose=True)

        data = {}
        data["_comment"] = "This file was generated by dict_filter.py. Do not hand edit"
        for cat in self.__categories:
            if cat not in dApi.getCategoryList():
                print(f"{cat} is not found in the dictionary -- skipping")
                continue
            data[cat] = dApi.getAttributeNameList(cat)
        with open(self.__dataPath, "w") as fout:
            json.dump(data, fout, indent=4)

    def loadDataDictionary(self):
        with open(self.__dataPath, "r") as fin:
            self.__datadict = json.load(fin)

    def getAllowedCats(self):
        return self.__categories

    def getAllowedAttrs(self, cat):
        """Return allowed list.  If not present - all attributes allowed for now"""
        return self.__datadict.get(cat, None)


def main():
    """Parse dictionary and store"""

    sl = len(sys.argv)

    if sl != 2:
        print(f"{sys.argv[0]} <dictfile>")
        sys.exit(1)

    dictFile = sys.argv[1]

    df = DictFilter()
    df.createDataDictionary(dictFile)
    # Test read
    df.loadDataDictionary()


if __name__ == "__main__":
    main()
